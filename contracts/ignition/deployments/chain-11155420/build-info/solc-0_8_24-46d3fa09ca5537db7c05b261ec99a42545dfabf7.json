{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_24-46d3fa09ca5537db7c05b261ec99a42545dfabf7",
  "solcVersion": "0.8.24",
  "solcLongVersion": "0.8.24+commit.e11b9ed9",
  "userSourceNameMap": {
    "contracts/EIP7702DelegationManager.sol": "project/contracts/EIP7702DelegationManager.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "shanghai",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ],
      "viaIR": true
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/EIP7702DelegationManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n/**\r\n * @title EIP7702DelegationManager\r\n * @dev Implements EIP-7702 delegation functionality with time-based asset delegation\r\n * Users can delegate their assets for specific time periods with automatic expiration\r\n */\r\ncontract EIP7702DelegationManager is Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct Delegation {\r\n        address delegator; // Original asset owner\r\n        address delegate; // Address receiving delegation\r\n        address asset; // Asset contract address (address(0) for ETH)\r\n        uint256 amount; // Amount delegated\r\n        uint256 startTime; // When delegation starts\r\n        uint256 endTime; // When delegation expires\r\n        bool isActive; // Whether delegation is active\r\n        bool isRevoked; // Whether delegation was manually revoked\r\n    }\r\n\r\n    struct DelegationAuthority {\r\n        address authorizedCode; // EIP-7702 authorized code address\r\n        uint256 nonce; // Nonce for replay protection\r\n        bool isActive; // Whether authority is active\r\n    }\r\n\r\n    struct Subscription {\r\n        address subscriber; // User who created the subscription\r\n        address recipient; // Address receiving the recurring payments\r\n        address token; // Token contract address (address(0) for ETH)\r\n        uint256 amountPerInterval; // Amount to transfer each interval\r\n        uint256 totalAmount; // Total amount deposited\r\n        uint256 remainingAmount; // Amount remaining for future payments\r\n        uint256 startTime; // When subscription starts\r\n        uint256 interval; // Payment interval in seconds (e.g., 30 days for monthly)\r\n        uint256 periods; // Total number of payment periods\r\n        uint256 periodsRemaining; // Number of periods remaining\r\n        uint256 nextPaymentTime; // Timestamp of next payment\r\n        bool isActive; // Whether subscription is active\r\n        bool isPaused; // Whether subscription is paused by subscriber\r\n    }\r\n\r\n    // Mapping from delegation ID to delegation details\r\n    mapping(uint256 => Delegation) public delegations;\r\n\r\n    // Mapping from user address to their delegation authority\r\n    mapping(address => DelegationAuthority) public delegationAuthorities;\r\n\r\n    // Mapping from delegator to list of their delegation IDs\r\n    mapping(address => uint256[]) public userDelegations;\r\n\r\n    // Mapping from delegate to list of delegation IDs they received\r\n    mapping(address => uint256[]) public receivedDelegations;\r\n\r\n    // Subscription mappings\r\n    mapping(uint256 => Subscription) public subscriptions;\r\n    mapping(address => uint256[]) public userSubscriptions;\r\n    mapping(address => uint256[]) public receivedSubscriptions;\r\n\r\n    uint256 public nextDelegationId = 1;\r\n    uint256 public nextSubscriptionId = 1;\r\n    uint256 public maxDelegationDuration = 365 days; // 1 year max\r\n    uint256 public minDelegationDuration = 1 hours; // 1 hour min\r\n    uint256 public maxSubscriptionDuration = 365 days; // 1 year max\r\n    uint256 public minSubscriptionInterval = 1 days; // 1 day min interval\r\n\r\n    // Events\r\n    event DelegationCreated(\r\n        uint256 indexed delegationId,\r\n        address indexed delegator,\r\n        address indexed delegate,\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 startTime,\r\n        uint256 endTime\r\n    );\r\n\r\n    event DelegationRevoked(\r\n        uint256 indexed delegationId,\r\n        address indexed delegator,\r\n        address indexed delegate\r\n    );\r\n\r\n    event DelegationExpired(\r\n        uint256 indexed delegationId,\r\n        address indexed delegator,\r\n        address indexed delegate\r\n    );\r\n\r\n    event DelegatedETHWithdrawn(\r\n        uint256 indexed delegationId,\r\n        address indexed delegator,\r\n        address indexed delegate,\r\n        uint256 amount\r\n    );\r\n\r\n    event DelegatedTokensTransferred(\r\n        uint256 indexed delegationId,\r\n        address indexed delegator,\r\n        address indexed delegate,\r\n        address to,\r\n        uint256 amount\r\n    );\r\n\r\n    event AuthorityGranted(\r\n        address indexed user,\r\n        address indexed authorizedCode,\r\n        uint256 nonce\r\n    );\r\n\r\n    event AuthorityRevoked(\r\n        address indexed user,\r\n        address indexed authorizedCode\r\n    );\r\n\r\n    // Subscription events\r\n    event SubscriptionCreated(\r\n        uint256 indexed subscriptionId,\r\n        address indexed subscriber,\r\n        address indexed recipient,\r\n        address token,\r\n        uint256 amountPerInterval,\r\n        uint256 totalAmount,\r\n        uint256 startTime,\r\n        uint256 interval,\r\n        uint256 periods\r\n    );\r\n\r\n    event SubscriptionPaymentProcessed(\r\n        uint256 indexed subscriptionId,\r\n        address indexed subscriber,\r\n        address indexed recipient,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 periodNumber\r\n    );\r\n\r\n    event SubscriptionCancelled(\r\n        uint256 indexed subscriptionId,\r\n        address indexed subscriber,\r\n        address indexed recipient,\r\n        uint256 remainingAmount\r\n    );\r\n\r\n    event SubscriptionPaused(\r\n        uint256 indexed subscriptionId,\r\n        address indexed subscriber\r\n    );\r\n\r\n    event SubscriptionResumed(\r\n        uint256 indexed subscriptionId,\r\n        address indexed subscriber\r\n    );\r\n\r\n    event SubscriptionCompleted(\r\n        uint256 indexed subscriptionId,\r\n        address indexed subscriber,\r\n        address indexed recipient\r\n    );\r\n\r\n    constructor() Ownable(msg.sender) {}\r\n\r\n    /**\r\n     * @dev Grant delegation authority using EIP-7702\r\n     * @param authorizedCode The code address to authorize for delegations\r\n     */\r\n    function grantDelegationAuthority(address authorizedCode) external {\r\n        require(authorizedCode != address(0), \"Invalid authorized code\");\r\n\r\n        delegationAuthorities[msg.sender] = DelegationAuthority({\r\n            authorizedCode: authorizedCode,\r\n            nonce: delegationAuthorities[msg.sender].nonce + 1,\r\n            isActive: true\r\n        });\r\n\r\n        emit AuthorityGranted(\r\n            msg.sender,\r\n            authorizedCode,\r\n            delegationAuthorities[msg.sender].nonce\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Revoke delegation authority\r\n     */\r\n    function revokeDelegationAuthority() external {\r\n        require(\r\n            delegationAuthorities[msg.sender].isActive,\r\n            \"No active authority\"\r\n        );\r\n\r\n        address authorizedCode = delegationAuthorities[msg.sender]\r\n            .authorizedCode;\r\n        delegationAuthorities[msg.sender].isActive = false;\r\n\r\n        emit AuthorityRevoked(msg.sender, authorizedCode);\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new time-based delegation\r\n     * @param delegate Address to delegate assets to\r\n     * @param asset Asset contract address (address(0) for ETH)\r\n     * @param amount Amount to delegate\r\n     * @param duration Duration of delegation in seconds\r\n     */\r\n    function createDelegation(\r\n        address delegate,\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 duration\r\n    ) external payable nonReentrant {\r\n        require(delegate != address(0), \"Invalid delegate\");\r\n        require(delegate != msg.sender, \"Cannot delegate to self\");\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        require(duration >= minDelegationDuration, \"Duration too short\");\r\n        require(duration <= maxDelegationDuration, \"Duration too long\");\r\n\r\n        uint256 startTime = block.timestamp;\r\n        uint256 endTime = startTime + duration;\r\n\r\n        // Handle ETH delegation\r\n        if (asset == address(0)) {\r\n            require(msg.value == amount, \"ETH amount mismatch\");\r\n        } else {\r\n            // Handle ERC20 delegation\r\n            require(msg.value == 0, \"No ETH should be sent for ERC20\");\r\n            IERC20(asset).safeTransferFrom(msg.sender, address(this), amount);\r\n        }\r\n\r\n        uint256 delegationId = nextDelegationId++;\r\n\r\n        delegations[delegationId] = Delegation({\r\n            delegator: msg.sender,\r\n            delegate: delegate,\r\n            asset: asset,\r\n            amount: amount,\r\n            startTime: startTime,\r\n            endTime: endTime,\r\n            isActive: true,\r\n            isRevoked: false\r\n        });\r\n\r\n        userDelegations[msg.sender].push(delegationId);\r\n        receivedDelegations[delegate].push(delegationId);\r\n\r\n        emit DelegationCreated(\r\n            delegationId,\r\n            msg.sender,\r\n            delegate,\r\n            asset,\r\n            amount,\r\n            startTime,\r\n            endTime\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Manually revoke an active delegation before expiration\r\n     * @param delegationId ID of the delegation to revoke\r\n     */\r\n    function revokeDelegation(uint256 delegationId) external nonReentrant {\r\n        Delegation storage delegation = delegations[delegationId];\r\n\r\n        require(delegation.delegator == msg.sender, \"Not the delegator\");\r\n        require(delegation.isActive, \"Delegation not active\");\r\n        require(!delegation.isRevoked, \"Already revoked\");\r\n        require(block.timestamp < delegation.endTime, \"Already expired\");\r\n\r\n        delegation.isActive = false;\r\n        delegation.isRevoked = true;\r\n\r\n        // Return assets to delegator\r\n        _returnAssets(delegation);\r\n\r\n        emit DelegationRevoked(\r\n            delegationId,\r\n            delegation.delegator,\r\n            delegation.delegate\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Process expired delegations and return assets\r\n     * @param delegationId ID of the delegation to process\r\n     */\r\n    function processExpiredDelegation(\r\n        uint256 delegationId\r\n    ) external nonReentrant {\r\n        Delegation storage delegation = delegations[delegationId];\r\n\r\n        require(delegation.isActive, \"Delegation not active\");\r\n        require(block.timestamp >= delegation.endTime, \"Not yet expired\");\r\n\r\n        delegation.isActive = false;\r\n\r\n        // Return assets to delegator\r\n        _returnAssets(delegation);\r\n\r\n        emit DelegationExpired(\r\n            delegationId,\r\n            delegation.delegator,\r\n            delegation.delegate\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Allow delegate to withdraw delegated ETH during active delegation\r\n     * @param delegationId ID of the delegation to withdraw from\r\n     * @param amount Amount of ETH to withdraw\r\n     */\r\n    function withdrawDelegatedETH(\r\n        uint256 delegationId,\r\n        uint256 amount\r\n    ) external nonReentrant {\r\n        Delegation storage delegation = delegations[delegationId];\r\n\r\n        require(delegation.delegate == msg.sender, \"Not the delegate\");\r\n        require(delegation.isActive, \"Delegation not active\");\r\n        require(!delegation.isRevoked, \"Delegation revoked\");\r\n        require(block.timestamp < delegation.endTime, \"Delegation expired\");\r\n        require(delegation.asset == address(0), \"Not ETH delegation\");\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        require(amount <= delegation.amount, \"Insufficient delegated amount\");\r\n\r\n        // Reduce the delegated amount\r\n        delegation.amount -= amount;\r\n\r\n        // If all amount is withdrawn, mark as inactive\r\n        if (delegation.amount == 0) {\r\n            delegation.isActive = false;\r\n        }\r\n\r\n        // Transfer ETH to delegate\r\n        (bool success, ) = msg.sender.call{value: amount}(\"\");\r\n        require(success, \"ETH transfer failed\");\r\n\r\n        emit DelegatedETHWithdrawn(\r\n            delegationId,\r\n            delegation.delegator,\r\n            msg.sender,\r\n            amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Allow delegate to transfer delegated ERC20 tokens\r\n     * @param delegationId ID of the delegation\r\n     * @param to Address to transfer tokens to\r\n     * @param amount Amount of tokens to transfer\r\n     */\r\n    function transferDelegatedTokens(\r\n        uint256 delegationId,\r\n        address to,\r\n        uint256 amount\r\n    ) external nonReentrant {\r\n        Delegation storage delegation = delegations[delegationId];\r\n\r\n        require(delegation.delegate == msg.sender, \"Not the delegate\");\r\n        require(delegation.isActive, \"Delegation not active\");\r\n        require(!delegation.isRevoked, \"Delegation revoked\");\r\n        require(block.timestamp < delegation.endTime, \"Delegation expired\");\r\n        require(delegation.asset != address(0), \"Not token delegation\");\r\n        require(to != address(0), \"Invalid recipient\");\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        require(amount <= delegation.amount, \"Insufficient delegated amount\");\r\n\r\n        // Reduce the delegated amount\r\n        delegation.amount -= amount;\r\n\r\n        // If all amount is transferred, mark as inactive\r\n        if (delegation.amount == 0) {\r\n            delegation.isActive = false;\r\n        }\r\n\r\n        // Transfer tokens to specified address\r\n        IERC20(delegation.asset).safeTransfer(to, amount);\r\n\r\n        emit DelegatedTokensTransferred(\r\n            delegationId,\r\n            delegation.delegator,\r\n            msg.sender,\r\n            to,\r\n            amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Get available amount for delegate to use\r\n     * @param delegationId ID of the delegation\r\n     * @return availableAmount Amount available for delegate to use\r\n     */\r\n    function getAvailableDelegatedAmount(\r\n        uint256 delegationId\r\n    ) external view returns (uint256) {\r\n        Delegation memory delegation = delegations[delegationId];\r\n\r\n        if (\r\n            !delegation.isActive ||\r\n            delegation.isRevoked ||\r\n            block.timestamp >= delegation.endTime\r\n        ) {\r\n            return 0;\r\n        }\r\n\r\n        return delegation.amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to return assets to delegator\r\n     * @param delegation The delegation struct containing asset details\r\n     */\r\n    function _returnAssets(Delegation memory delegation) internal {\r\n        if (delegation.asset == address(0)) {\r\n            // Return ETH\r\n            (bool success, ) = delegation.delegator.call{\r\n                value: delegation.amount\r\n            }(\"\");\r\n            require(success, \"ETH transfer failed\");\r\n        } else {\r\n            // Return ERC20 tokens\r\n            IERC20(delegation.asset).safeTransfer(\r\n                delegation.delegator,\r\n                delegation.amount\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Check if a delegation is currently active\r\n     * @param delegationId ID of the delegation to check\r\n     * @return isActive Whether the delegation is active\r\n     * @return timeLeft Seconds remaining until expiration (0 if expired)\r\n     */\r\n    function getDelegationStatus(\r\n        uint256 delegationId\r\n    ) external view returns (bool isActive, uint256 timeLeft) {\r\n        Delegation memory delegation = delegations[delegationId];\r\n\r\n        if (!delegation.isActive || delegation.isRevoked) {\r\n            return (false, 0);\r\n        }\r\n\r\n        if (block.timestamp >= delegation.endTime) {\r\n            return (false, 0);\r\n        }\r\n\r\n        return (true, delegation.endTime - block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Get user's delegation IDs\r\n     * @param user Address of the user\r\n     * @return delegationIds Array of delegation IDs created by the user\r\n     */\r\n    function getUserDelegations(\r\n        address user\r\n    ) external view returns (uint256[] memory) {\r\n        return userDelegations[user];\r\n    }\r\n\r\n    /**\r\n     * @dev Get delegation IDs received by a delegate\r\n     * @param delegate Address of the delegate\r\n     * @return delegationIds Array of delegation IDs received by the delegate\r\n     */\r\n    function getReceivedDelegations(\r\n        address delegate\r\n    ) external view returns (uint256[] memory) {\r\n        return receivedDelegations[delegate];\r\n    }\r\n\r\n    /**\r\n     * @dev Get delegation details\r\n     * @param delegationId ID of the delegation\r\n     * @return delegation The delegation struct\r\n     */\r\n    function getDelegation(\r\n        uint256 delegationId\r\n    ) external view returns (Delegation memory) {\r\n        return delegations[delegationId];\r\n    }\r\n\r\n    /**\r\n     * @dev Update delegation duration limits (only owner)\r\n     * @param newMinDuration New minimum delegation duration\r\n     * @param newMaxDuration New maximum delegation duration\r\n     */\r\n    function updateDurationLimits(\r\n        uint256 newMinDuration,\r\n        uint256 newMaxDuration\r\n    ) external onlyOwner {\r\n        require(newMinDuration > 0, \"Min duration must be positive\");\r\n        require(\r\n            newMaxDuration > newMinDuration,\r\n            \"Max must be greater than min\"\r\n        );\r\n\r\n        minDelegationDuration = newMinDuration;\r\n        maxDelegationDuration = newMaxDuration;\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new subscription with recurring payments\r\n     * @param recipient Address to receive recurring payments\r\n     * @param token Token contract address (address(0) for ETH)\r\n     * @param amountPerInterval Amount to transfer each interval\r\n     * @param totalAmount Total amount to deposit (must equal amountPerInterval * periods)\r\n     * @param startTime When the subscription should start\r\n     * @param interval Payment interval in seconds (e.g., 30 days)\r\n     * @param periods Total number of payment periods\r\n     */\r\n    function createSubscription(\r\n        address recipient,\r\n        address token,\r\n        uint256 amountPerInterval,\r\n        uint256 totalAmount,\r\n        uint256 startTime,\r\n        uint256 interval,\r\n        uint256 periods\r\n    ) external payable nonReentrant {\r\n        require(recipient != address(0), \"Invalid recipient\");\r\n        require(recipient != msg.sender, \"Cannot subscribe to self\");\r\n        require(amountPerInterval > 0, \"Amount must be greater than zero\");\r\n        require(\r\n            totalAmount == amountPerInterval * periods,\r\n            \"Total amount mismatch\"\r\n        );\r\n        require(interval >= minSubscriptionInterval, \"Interval too short\");\r\n        require(\r\n            interval * periods <= maxSubscriptionDuration,\r\n            \"Total duration too long\"\r\n        );\r\n        require(periods > 0, \"Periods must be greater than zero\");\r\n        require(startTime >= block.timestamp, \"Start time must be in future\");\r\n\r\n        // Handle payment collection\r\n        if (token == address(0)) {\r\n            // ETH subscription\r\n            require(msg.value == totalAmount, \"ETH amount mismatch\");\r\n        } else {\r\n            // ERC20 subscription\r\n            require(\r\n                msg.value == 0,\r\n                \"No ETH should be sent for token subscription\"\r\n            );\r\n            IERC20(token).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                totalAmount\r\n            );\r\n        }\r\n\r\n        uint256 subscriptionId = nextSubscriptionId++;\r\n\r\n        subscriptions[subscriptionId] = Subscription({\r\n            subscriber: msg.sender,\r\n            recipient: recipient,\r\n            token: token,\r\n            amountPerInterval: amountPerInterval,\r\n            totalAmount: totalAmount,\r\n            remainingAmount: totalAmount,\r\n            startTime: startTime,\r\n            interval: interval,\r\n            periods: periods,\r\n            periodsRemaining: periods,\r\n            nextPaymentTime: startTime,\r\n            isActive: true,\r\n            isPaused: false\r\n        });\r\n\r\n        userSubscriptions[msg.sender].push(subscriptionId);\r\n        receivedSubscriptions[recipient].push(subscriptionId);\r\n\r\n        emit SubscriptionCreated(\r\n            subscriptionId,\r\n            msg.sender,\r\n            recipient,\r\n            token,\r\n            amountPerInterval,\r\n            totalAmount,\r\n            startTime,\r\n            interval,\r\n            periods\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Process a subscription payment (can be called by anyone)\r\n     * @param subscriptionId ID of the subscription to process\r\n     */\r\n    function processSubscriptionPayment(\r\n        uint256 subscriptionId\r\n    ) external nonReentrant {\r\n        Subscription storage sub = subscriptions[subscriptionId];\r\n        require(sub.isActive, \"Subscription is not active\");\r\n        require(!sub.isPaused, \"Subscription is paused\");\r\n        require(\r\n            block.timestamp >= sub.nextPaymentTime,\r\n            \"Not yet time for next payment\"\r\n        );\r\n        require(sub.periodsRemaining > 0, \"No remaining periods\");\r\n        require(\r\n            sub.remainingAmount >= sub.amountPerInterval,\r\n            \"Insufficient remaining amount\"\r\n        );\r\n\r\n        // Calculate current period number\r\n        uint256 currentPeriod = sub.periods - sub.periodsRemaining + 1;\r\n\r\n        // Process payment\r\n        if (sub.token == address(0)) {\r\n            // ETH payment\r\n            (bool success, ) = sub.recipient.call{value: sub.amountPerInterval}(\r\n                \"\"\r\n            );\r\n            require(success, \"ETH transfer failed\");\r\n        } else {\r\n            // ERC20 payment\r\n            IERC20(sub.token).safeTransfer(\r\n                sub.recipient,\r\n                sub.amountPerInterval\r\n            );\r\n        }\r\n\r\n        // Update subscription state\r\n        sub.remainingAmount -= sub.amountPerInterval;\r\n        sub.periodsRemaining--;\r\n        sub.nextPaymentTime += sub.interval;\r\n\r\n        emit SubscriptionPaymentProcessed(\r\n            subscriptionId,\r\n            sub.subscriber,\r\n            sub.recipient,\r\n            sub.token,\r\n            sub.amountPerInterval,\r\n            currentPeriod\r\n        );\r\n\r\n        // Check if subscription is complete\r\n        if (sub.periodsRemaining == 0) {\r\n            sub.isActive = false;\r\n            emit SubscriptionCompleted(\r\n                subscriptionId,\r\n                sub.subscriber,\r\n                sub.recipient\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel a subscription and return remaining funds\r\n     * @param subscriptionId ID of the subscription to cancel\r\n     */\r\n    function cancelSubscription(uint256 subscriptionId) external nonReentrant {\r\n        Subscription storage sub = subscriptions[subscriptionId];\r\n        require(sub.subscriber == msg.sender, \"Only subscriber can cancel\");\r\n        require(sub.isActive, \"Subscription is not active\");\r\n        require(sub.remainingAmount > 0, \"No remaining amount to refund\");\r\n\r\n        uint256 refundAmount = sub.remainingAmount;\r\n        sub.remainingAmount = 0;\r\n        sub.isActive = false;\r\n\r\n        // Return remaining funds to subscriber\r\n        if (sub.token == address(0)) {\r\n            // ETH refund\r\n            (bool success, ) = sub.subscriber.call{value: refundAmount}(\"\");\r\n            require(success, \"ETH refund failed\");\r\n        } else {\r\n            // ERC20 refund\r\n            IERC20(sub.token).safeTransfer(sub.subscriber, refundAmount);\r\n        }\r\n\r\n        emit SubscriptionCancelled(\r\n            subscriptionId,\r\n            sub.subscriber,\r\n            sub.recipient,\r\n            refundAmount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Pause a subscription\r\n     * @param subscriptionId ID of the subscription to pause\r\n     */\r\n    function pauseSubscription(uint256 subscriptionId) external {\r\n        Subscription storage sub = subscriptions[subscriptionId];\r\n        require(sub.subscriber == msg.sender, \"Only subscriber can pause\");\r\n        require(sub.isActive, \"Subscription is not active\");\r\n        require(!sub.isPaused, \"Subscription is already paused\");\r\n\r\n        sub.isPaused = true;\r\n        emit SubscriptionPaused(subscriptionId, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Resume a paused subscription\r\n     * @param subscriptionId ID of the subscription to resume\r\n     */\r\n    function resumeSubscription(uint256 subscriptionId) external {\r\n        Subscription storage sub = subscriptions[subscriptionId];\r\n        require(sub.subscriber == msg.sender, \"Only subscriber can resume\");\r\n        require(sub.isActive, \"Subscription is not active\");\r\n        require(sub.isPaused, \"Subscription is not paused\");\r\n\r\n        // Adjust next payment time based on pause duration\r\n        uint256 pauseDuration = block.timestamp -\r\n            (sub.nextPaymentTime - sub.interval);\r\n        sub.nextPaymentTime =\r\n            block.timestamp +\r\n            sub.interval -\r\n            (pauseDuration % sub.interval);\r\n        sub.isPaused = false;\r\n\r\n        emit SubscriptionResumed(subscriptionId, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Emergency function to process multiple expired delegations\r\n     * @param delegationIds Array of delegation IDs to process\r\n     */\r\n    function batchProcessExpired(uint256[] calldata delegationIds) external {\r\n        for (uint256 i = 0; i < delegationIds.length; i++) {\r\n            Delegation storage delegation = delegations[delegationIds[i]];\r\n\r\n            if (\r\n                delegation.isActive &&\r\n                block.timestamp >= delegation.endTime &&\r\n                !delegation.isRevoked\r\n            ) {\r\n                delegation.isActive = false;\r\n                _returnAssets(delegation);\r\n\r\n                emit DelegationExpired(\r\n                    delegationIds[i],\r\n                    delegation.delegator,\r\n                    delegation.delegate\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Process multiple subscription payments in batch\r\n     * @param subscriptionIds Array of subscription IDs to process\r\n     */\r\n    function batchProcessSubscriptionPayments(\r\n        uint256[] calldata subscriptionIds\r\n    ) external {\r\n        for (uint256 i = 0; i < subscriptionIds.length; i++) {\r\n            Subscription storage sub = subscriptions[subscriptionIds[i]];\r\n\r\n            if (\r\n                sub.isActive &&\r\n                !sub.isPaused &&\r\n                block.timestamp >= sub.nextPaymentTime &&\r\n                sub.periodsRemaining > 0 &&\r\n                sub.remainingAmount >= sub.amountPerInterval\r\n            ) {\r\n                uint256 currentPeriod = sub.periods - sub.periodsRemaining + 1;\r\n\r\n                // Process payment\r\n                if (sub.token == address(0)) {\r\n                    (bool success, ) = sub.recipient.call{\r\n                        value: sub.amountPerInterval\r\n                    }(\"\");\r\n                    if (success) {\r\n                        sub.remainingAmount -= sub.amountPerInterval;\r\n                        sub.periodsRemaining--;\r\n                        sub.nextPaymentTime += sub.interval;\r\n\r\n                        emit SubscriptionPaymentProcessed(\r\n                            subscriptionIds[i],\r\n                            sub.subscriber,\r\n                            sub.recipient,\r\n                            sub.token,\r\n                            sub.amountPerInterval,\r\n                            currentPeriod\r\n                        );\r\n\r\n                        if (sub.periodsRemaining == 0) {\r\n                            sub.isActive = false;\r\n                            emit SubscriptionCompleted(\r\n                                subscriptionIds[i],\r\n                                sub.subscriber,\r\n                                sub.recipient\r\n                            );\r\n                        }\r\n                    }\r\n                } else {\r\n                    try\r\n                        IERC20(sub.token).transfer(\r\n                            sub.recipient,\r\n                            sub.amountPerInterval\r\n                        )\r\n                    returns (bool success) {\r\n                        if (success) {\r\n                            sub.remainingAmount -= sub.amountPerInterval;\r\n                            sub.periodsRemaining--;\r\n                            sub.nextPaymentTime += sub.interval;\r\n\r\n                            emit SubscriptionPaymentProcessed(\r\n                                subscriptionIds[i],\r\n                                sub.subscriber,\r\n                                sub.recipient,\r\n                                sub.token,\r\n                                sub.amountPerInterval,\r\n                                currentPeriod\r\n                            );\r\n\r\n                            if (sub.periodsRemaining == 0) {\r\n                                sub.isActive = false;\r\n                                emit SubscriptionCompleted(\r\n                                    subscriptionIds[i],\r\n                                    sub.subscriber,\r\n                                    sub.recipient\r\n                                );\r\n                            }\r\n                        }\r\n                    } catch {\r\n                        // Continue to next subscription if transfer fails\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get subscription details\r\n     * @param subscriptionId ID of the subscription\r\n     * @return subscription The subscription struct\r\n     */\r\n    function getSubscription(\r\n        uint256 subscriptionId\r\n    ) external view returns (Subscription memory) {\r\n        return subscriptions[subscriptionId];\r\n    }\r\n\r\n    /**\r\n     * @dev Get user's subscription IDs\r\n     * @param user Address of the user\r\n     * @return subscriptionIds Array of subscription IDs created by the user\r\n     */\r\n    function getUserSubscriptions(\r\n        address user\r\n    ) external view returns (uint256[] memory) {\r\n        return userSubscriptions[user];\r\n    }\r\n\r\n    /**\r\n     * @dev Get subscription IDs received by a recipient\r\n     * @param recipient Address of the recipient\r\n     * @return subscriptionIds Array of subscription IDs received by the recipient\r\n     */\r\n    function getReceivedSubscriptions(\r\n        address recipient\r\n    ) external view returns (uint256[] memory) {\r\n        return receivedSubscriptions[recipient];\r\n    }\r\n\r\n    /**\r\n     * @dev Check if a subscription payment is due\r\n     * @param subscriptionId ID of the subscription\r\n     * @return isDue Whether payment is due\r\n     * @return timeUntilDue Seconds until next payment (0 if due now)\r\n     */\r\n    function getSubscriptionPaymentStatus(\r\n        uint256 subscriptionId\r\n    ) external view returns (bool isDue, uint256 timeUntilDue) {\r\n        Subscription memory sub = subscriptions[subscriptionId];\r\n\r\n        if (!sub.isActive || sub.isPaused || sub.periodsRemaining == 0) {\r\n            return (false, 0);\r\n        }\r\n\r\n        if (block.timestamp >= sub.nextPaymentTime) {\r\n            return (true, 0);\r\n        }\r\n\r\n        return (false, sub.nextPaymentTime - block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Update subscription duration limits (only owner)\r\n     * @param newMinInterval New minimum subscription interval\r\n     * @param newMaxDuration New maximum subscription duration\r\n     */\r\n    function updateSubscriptionLimits(\r\n        uint256 newMinInterval,\r\n        uint256 newMaxDuration\r\n    ) external onlyOwner {\r\n        require(newMinInterval > 0, \"Min interval must be positive\");\r\n        require(\r\n            newMaxDuration > newMinInterval,\r\n            \"Max duration must be greater than min interval\"\r\n        );\r\n\r\n        minSubscriptionInterval = newMinInterval;\r\n        maxSubscriptionDuration = newMaxDuration;\r\n    }\r\n\r\n    // Allow contract to receive ETH\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev Get subscription remaining balance\r\n     * @param subscriptionId ID of the subscription\r\n     * @return remainingAmount Amount remaining in the subscription\r\n     */\r\n    function getSubscriptionRemainingBalance(\r\n        uint256 subscriptionId\r\n    ) external view returns (uint256) {\r\n        return subscriptions[subscriptionId].remainingAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Get next payment time for a subscription\r\n     * @param subscriptionId ID of the subscription\r\n     * @return nextPaymentTime Timestamp of next payment\r\n     */\r\n    function getSubscriptionNextPayment(\r\n        uint256 subscriptionId\r\n    ) external view returns (uint256) {\r\n        return subscriptions[subscriptionId].nextPaymentTime;\r\n    }\r\n}\r\n"
      }
    }
  }
}